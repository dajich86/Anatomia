/*********************************************************
This is a library for the MPR121 12-channel Capacitive touch sensor

Designed specifically to work with the MPR121 Breakout in the Adafruit shop 
  ----> https://www.adafruit.com/products/

These sensors use I2C communicate, at least 2 pins are required 
to interface

Adafruit invests time and resources providing this open source code, 
please support Adafruit and open-source hardware by purchasing 
products from Adafruit!

Written by Limor Fried/Ladyada for Adafruit Industries.  
BSD license, all text above must be included in any redistribution
**********************************************************/

#include <Wire.h>
#include "Adafruit_MPR121.h"

#ifndef _BV
#define _BV(bit) (1 << (bit)) 
#endif

// You can have up to 4 on one i2c bus but one is enough for testing!
Adafruit_MPR121 cap = Adafruit_MPR121();

// Keeps track of the last pins touched
// so we know when buttons are 'released'
uint16_t lasttouched = 0;
uint16_t currtouched = 0;
unsigned char respuesta;
signed int valor_base[]={68,64,64,64,64,68,68,68,68,68,68,76};
signed int valor_delta[]={};

void setup() {
  Serial.begin(9600);

  while (!Serial) { // needed to keep leonardo/micro from starting too fast!
    delay(10);
  }

  //Serial.println("Adafruit MPR121 Capacitive Touch sensor test"); 

  // Default address is 0x5A, if tied to 3.3V its 0x5B
  // If tied to SDA its 0x5C and if SCL then 0x5D
  if (!cap.begin(0x5A)) {
    Serial.println("MPR121 not found, check wiring?");
    while (1);
  }
  Serial.println("Ejercicio de Anatomia #1");
  Serial.println("");
}

void loop() {
  // Get the currently touched pads
  uint8_t i;
  currtouched = cap.touched();

/*
  for (i=0; i<12; i++) {
    // it if *is* touched and *wasnt* touched before, alert!
    if ((currtouched & _BV(i)) && !(lasttouched & _BV(i)) ) {
      switch(i){
        case 0: Serial.println("Hueso coxal(Ilion)"); break;
        case 1: Serial.println("Dorsal Ancho"); break;
        case 2: Serial.println("Trapecio"); break;
        case 9: Serial.println("Elevador de la escapula"); break;
        case 10: Serial.println("Serrato Anterior"); break;
        case 11: Serial.println("Siguiente ejercicio"); break;
        default: break; 

      }
      //Serial.print(i);
      delay(100);
    }

    
    /*
    // if it *was* touched and now *isnt*, alert!
    if (!(currtouched & _BV(i)) && (lasttouched & _BV(i)) ) {
      Serial.print(i); Serial.println(" released");    
    }
    
  }*/
  

  // reset our state
  lasttouched = currtouched;

  
 //return;// comment out this line for detailed data from the sensor!

  // debugging info, what
  //Serial.print("\t\t\t\t\t\t\t\t\t\t\t\t\t 0x"); Serial.println(cap.touched(), HEX);
  
  //Serial.print("Filt: ");
  
  Serial.print("Canal: ");
  for (uint8_t i=0; i<12; i++) {
      Serial.print(i);
      Serial.print(" ");
  }
  Serial.println();
  Serial.print("       ");
  for (uint8_t i=0; i<12; i++) {
    //Serial.print(cap.filteredData(i)); Serial.print("\t");
    Serial.print( cap.filteredData(i)-cap.baselineData(i) );
    if( (valor_base[i]-cap.filteredData(i))<=3)//valor_delta[i])
    {
      Serial.print("  ");
    }    
    else
      Serial.print("  ");
  }
  Serial.println();
 
  Serial.print("Filter: ");
  for (uint8_t i=0; i<12; i++) {
    Serial.print(cap.filteredData(i)); Serial.print("\t"); 
  }
  
  Serial.println();
  /*
  Serial.print("Base:   ");
  for (uint8_t i=0; i<12; i++) {
    
    Serial.print(cap.baselineData(i)); Serial.print("\t");
  }
 */
  
  Serial.println();
  Serial.println();
  Serial.println();
  Serial.println();
  Serial.println();
  Serial.println();
  Serial.println();
  Serial.println();


  // put a delay so it isn't overwhelming
  delay(1000);
}
